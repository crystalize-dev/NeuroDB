datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String    @unique
  hashedPassword    String?
  accounts          Account[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  Session           Session[]
  resetToken        String?
  resetTokenExpired DateTime?
}

model Model {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  filename String
  filepath String @unique

  variables   Variables?
  variablesId String?    @db.ObjectId
}

model CategoricalVariable {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  values String[]

  variables   Variables @relation(fields: [variablesId], references: [id], onDelete: Cascade)
  variablesId String    @db.ObjectId
}

model Variables {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  categoricalVariables CategoricalVariable[] // One-to-many relation
  continous            String[] // Array of continous variables

  Model   Model?  @relation(fields: [ModelId], references: [id], onDelete: Cascade)
  ModelId String? @unique @db.ObjectId
}
